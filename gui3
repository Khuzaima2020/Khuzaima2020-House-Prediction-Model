import tkinter as tk
from tkinter import ttk
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.neighbors import KNeighborsRegressor
import pickle

# Load the dataset
df = pd.read_csv('cleaned_Data .csv')  # Corrected file path
df.drop(['Unnamed: 0'], axis=1, inplace=True)

# Prepare the features and target variable
x = df.drop(['price'], axis=1)
y = df['price']

# One hot encoding using column transformer
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0, 1, 2, 4])], remainder='passthrough')
x = ct.fit_transform(x)

# Splitting the data into train and test
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

# Create KNN regressor instance
knn_regressor = KNeighborsRegressor(n_neighbors=6)
# Fit the KNN regressor on the training data
knn_regressor.fit(x_train, y_train)

# Save the model
pickle.dump(knn_regressor, open('KNN_model.pkl', 'wb'))


class MainPage(tk.Frame):
    def __init__(self, master, app):
        super().__init__(master)
        self.app = app
        label = ttk.Label(self, text="Welcome to Price Predictor", font=('Helvetica', 20))
        label.pack(pady=20)
        predict_button = ttk.Button(self, text="Predict Price", command=self.navigate_to_input_page, style='C.TButton')
        predict_button.pack(pady=10)

    def navigate_to_input_page(self):
        self.app.show_frame(InputPage)


class InputPage(tk.Frame):
    def __init__(self, master, app):
        super().__init__(master)
        self.app = app
        label_frame = ttk.LabelFrame(self, text="Enter Property Details")
        label_frame.grid(row=0, column=0, padx=10, pady=10, columnspan=2, sticky="nsew")

        self.labels = ['Property Type:', 'Location:', 'City:', 'Baths:', 'Purpose:', 'Bedrooms:', 'Area in Marla:']
        self.entries = []

        for i, label_text in enumerate(self.labels):
            label = ttk.Label(label_frame, text=label_text, font=('Helvetica', 12))
            label.grid(row=i, column=0, padx=10, pady=10, sticky="e")

            # Add a drop-down option for the "Property Type" field
            if label_text == 'Property Type:':
                property_type_values = ['Flat', 'House', 'Penthouse']
                property_type_combobox = ttk.Combobox(label_frame, values=property_type_values, font=('Helvetica', 12))
                property_type_combobox.grid(row=i, column=1, padx=10, pady=10, sticky="w")
                self.entries.append(property_type_combobox)
            else:
                entry = ttk.Entry(label_frame, font=('Helvetica', 12))
                entry.grid(row=i, column=1, padx=10, pady=10, sticky="w")
                self.entries.append(entry)

        predict_button = ttk.Button(self, text="Predict Price", command=self.predict_price, style='C.TButton')
        predict_button.grid(row=1, column=0, columnspan=2, pady=10)

        back_button = ttk.Button(self, text="Back to Main Page", command=self.navigate_to_main_page, style='C.TButton')
        back_button.grid(row=2, column=0, columnspan=2, pady=10)

    def predict_price(self):
        try:
            user_input = pd.DataFrame([[entry.get() for entry in self.entries]],
                                       columns=['property_type', 'location', 'city', 'baths', 'purpose', 'bedrooms',
                                                'Area_in_Marla'])
            user_input_transformed = ct.transform(user_input)
            predicted_price = knn_regressor.predict(user_input_transformed)
            result_label = ttk.Label(self, text=f'Predicted Price: {predicted_price[0]:.2f}', font=('Helvetica', 12))
            result_label.grid(row=3, column=0, columnspan=2, pady=10)
        except Exception as e:
            result_label = ttk.Label(self, text=f'Error: {str(e)}', font=('Helvetica', 12))
            result_label.grid(row=3, column=0, columnspan=2, pady=10)

    def navigate_to_main_page(self):
        self.app.show_frame(MainPage)


class PricePredictorApp(tk.Tk):
    def __init__(self):
        super().__init__()

        container = ttk.Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.title("Price Predictor")  # Set the title for the main application window

        style = ttk.Style()
        style.configure('C.TButton', font=('Helvetica', 12))

        self.frames = {}
        for F in (MainPage, InputPage):
            frame = F(container, self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(MainPage)

    def show_frame(self, cont):
        frame = self.frames[cont]
        frame.tkraise()


if __name__ == "__main__":
    app = PricePredictorApp()
    app.geometry("500x500")
    app.mainloop()
